// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Persistence.EF.Context;

#nullable disable

namespace Diet.Persistence.EF.Migrations
{
    [DbContext(typeof(DietDbContext))]
    partial class DietDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseDisease", b =>
                {
                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("CaseDisease");
                });

            modelBuilder.Entity("CaseDrug", b =>
                {
                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseId", "DrugId");

                    b.HasIndex("DrugId");

                    b.ToTable("CaseDrug");
                });

            modelBuilder.Entity("CaseFoodStuff", b =>
                {
                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodStuffAllergyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseId", "FoodStuffAllergyId");

                    b.HasIndex("FoodStuffAllergyId");

                    b.ToTable("CaseFoodStuff");
                });

            modelBuilder.Entity("CaseSupplement", b =>
                {
                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseId", "SupplementId");

                    b.HasIndex("SupplementId");

                    b.ToTable("CaseSupplement");
                });

            modelBuilder.Entity("Diet.Domain.Case.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BodyActivity")
                        .HasColumnType("int");

                    b.Property<int>("BodyForm")
                        .HasColumnType("int");

                    b.Property<int>("ChangeWeightType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseDay")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsSport")
                        .HasColumnType("bit");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SportActivity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SportId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int?>("WeightChangeAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("SportId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowToUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationDisease_WhiteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationDurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DurationAgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationAgeId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationDurationAge");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationLifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.disease.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodGroup");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodStuff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodStuff");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Drug_Intraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("FoodId");

                    b.ToTable("Food_Drug_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Food_Intraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodFistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodSecondId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodFistId");

                    b.HasIndex("FoodSecondId");

                    b.ToTable("Food_Food_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.DurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DurationAge");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.LifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.sport.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("High")
                        .HasColumnType("int");

                    b.Property<int>("Low")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.Supplement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowToUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplementGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupplementGroupId");

                    b.ToTable("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementDisease_WhiteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementDurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DurationAgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationAgeId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementDurationAge");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplementGroup");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementLifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Entities.TicketMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessage");
                });

            modelBuilder.Entity("Diet.Domain.transactions.Transactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("ZarinPalAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZarinPalRefNum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Diet.Domain.user.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Diet.Domain.user.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShbaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifyExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CaseDisease", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.disease.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaseDrug", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.user.Drug", null)
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaseFoodStuff", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.FoodStuff", null)
                        .WithMany()
                        .HasForeignKey("FoodStuffAllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaseSupplement", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Entities.Supplement", null)
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diet.Domain.Case.Case", b =>
                {
                    b.HasOne("Diet.Domain.food.Entities.Food", null)
                        .WithMany("Case")
                        .HasForeignKey("FoodId");

                    b.HasOne("Diet.Domain.lifeCourse.LifeCourse", "LifeCourse")
                        .WithMany("Case")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.sport.Sport", "Sport")
                        .WithMany("Case")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.transactions.Transactions", "Transactions")
                        .WithMany("Case")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Sport");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationDisease_WhiteList", b =>
                {
                    b.HasOne("Diet.Domain.disease.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.Recommendation.Entities.Recommendation", "Recommendation")
                        .WithMany("RecommendationDisease_WhiteList")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationDurationAge", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.DurationAge", "DurationAge")
                        .WithMany()
                        .HasForeignKey("DurationAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.Recommendation.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationAge");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.RecommendationLifeCourse", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.LifeCourse", "LifeCourse")
                        .WithMany()
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.Recommendation.Entities.Recommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Drug_Intraction", b =>
                {
                    b.HasOne("Diet.Domain.user.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Food_Intraction", b =>
                {
                    b.HasOne("Diet.Domain.food.Entities.Food", "FoodFirst")
                        .WithMany("FoodFirst")
                        .HasForeignKey("FoodFistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "FoodSecond")
                        .WithMany("FoodSecond")
                        .HasForeignKey("FoodSecondId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodFirst");

                    b.Navigation("FoodSecond");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.Supplement", b =>
                {
                    b.HasOne("Diet.Domain.supplement.Entities.SupplementGroup", "SupplementGroup")
                        .WithMany("Supplement")
                        .HasForeignKey("SupplementGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplementGroup");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementDisease_WhiteList", b =>
                {
                    b.HasOne("Diet.Domain.disease.Disease", "Disease")
                        .WithMany("SupplementDisease_WhiteList")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Entities.Supplement", "Supplement")
                        .WithMany("SupplementDisease_WhiteList")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementDurationAge", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.DurationAge", "DurationAge")
                        .WithMany()
                        .HasForeignKey("DurationAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Entities.Supplement", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationAge");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementLifeCourse", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.LifeCourse", "LifeCourse")
                        .WithMany("SupplementLifeCourse")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Entities.Supplement", "Supplement")
                        .WithMany()
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Entities.Ticket", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Entities.TicketMessage", b =>
                {
                    b.HasOne("Diet.Domain.user.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.ticket.Entities.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Diet.Domain.Recommendation.Entities.Recommendation", b =>
                {
                    b.Navigation("RecommendationDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.disease.Disease", b =>
                {
                    b.Navigation("SupplementDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("FoodFirst");

                    b.Navigation("FoodSecond");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.LifeCourse", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("SupplementLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.sport.Sport", b =>
                {
                    b.Navigation("Case");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.Supplement", b =>
                {
                    b.Navigation("SupplementDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Entities.SupplementGroup", b =>
                {
                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Entities.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Diet.Domain.transactions.Transactions", b =>
                {
                    b.Navigation("Case");
                });
#pragma warning restore 612, 618
        }
    }
}
