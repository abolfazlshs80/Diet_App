// <auto-generated />
using System;
using Diet.Persistence.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diet.Persistence.EF.Migrations
{
    [DbContext(typeof(DietDbContext))]
    [Migration("20250729074739_add-password-user")]
    partial class addpassworduser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Diet.Domain.Case.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("BodyActivity")
                        .HasColumnType("int");

                    b.Property<int>("BodyForm")
                        .HasColumnType("int");

                    b.Property<int>("ChangeWeightType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExerciseDay")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseTime")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsSport")
                        .HasColumnType("bit");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SportActivity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SportId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int?>("WeightChangeAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("SportId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("Diet.Domain.caseDisease.CaseDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("CaseDisease");
                });

            modelBuilder.Entity("Diet.Domain.caseDrug.CaseDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("DrugId");

                    b.ToTable("CaseDrug");
                });

            modelBuilder.Entity("Diet.Domain.caseFoodStuffAllergy.CaseFoodStuffAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodStuffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("FoodId");

                    b.HasIndex("FoodStuffId");

                    b.ToTable("CaseFoodStuffAllergy");
                });

            modelBuilder.Entity("Diet.Domain.casePleasantFood.CasePleasantFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("FoodId");

                    b.ToTable("CasePleasantFood");
                });

            modelBuilder.Entity("Diet.Domain.caseSupplement.CaseSupplement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("CaseSupplement");
                });

            modelBuilder.Entity("Diet.Domain.caseUnPleasantFood.CaseUnPleasantFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("FoodId");

                    b.ToTable("CaseUnPleasantFood");
                });

            modelBuilder.Entity("Diet.Domain.disease.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("Diet.Domain.drug.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Diet.Domain.durationAge.Entities.DurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("DurationAge");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("FoodGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FoodGroupId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FoodGroup");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodStuff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FoodStuff");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Drug_Intraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("FoodId");

                    b.ToTable("Food_Drug_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Food_Intraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodFistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodSecondId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodFistId");

                    b.HasIndex("FoodSecondId");

                    b.ToTable("Food_Food_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.Entities.LifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.recommendation.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EnglishTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HowToUse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.recommendationDisease_WhiteList.RecommendationDisease_WhiteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.recommendationDurationAge.RecommendationDurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DurationAgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationAgeId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationDurationAge");
                });

            modelBuilder.Entity("Diet.Domain.recommendationLifeCourse.RecommendationLifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("RecommendationLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.role.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Diet.Domain.sport.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("High")
                        .HasColumnType("int");

                    b.Property<int>("Low")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Supplement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EnglishTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HowToUse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("SupplementGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SupplementGroupId");

                    b.ToTable("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplementDisease_WhiteList.SupplementDisease_WhiteList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.supplementDurationAge.SupplementDurationAge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DurationAgeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationAgeId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementDurationAge");
                });

            modelBuilder.Entity("Diet.Domain.supplementGroup.SupplementGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplementGroup");
                });

            modelBuilder.Entity("Diet.Domain.supplementLifeCourse.SupplementLifeCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LifeCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LifeCourseId");

                    b.HasIndex("SupplementId");

                    b.ToTable("SupplementLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Diet.Domain.ticketMessage.TicketMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessage");
                });

            modelBuilder.Entity("Diet.Domain.transactions.Transactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<string>("ZarinPalAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZarinPalRefNum")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Diet.Domain.user.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShbaNumber")
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<string>("VerifyCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("VerifyExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diet.Domain.userRole.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Diet.Domain.Case.Case", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.Entities.LifeCourse", "LifeCourse")
                        .WithMany("Case")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.sport.Sport", "Sport")
                        .WithMany("Case")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.transactions.Transactions", "Transactions")
                        .WithMany("Case")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.user.User", "User")
                        .WithMany("Case")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Sport");

                    b.Navigation("Transactions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diet.Domain.caseDisease.CaseDisease", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("Disease")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.disease.Disease", "Disease")
                        .WithMany("CaseDisease")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("Diet.Domain.caseDrug.CaseDrug", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("CaseDrug")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.drug.Entities.Drug", "Drug")
                        .WithMany("CaseDrug")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("Diet.Domain.caseFoodStuffAllergy.CaseFoodStuffAllergy", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("FoodStuffAllergy")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", null)
                        .WithMany("CaseFoodStuffAllergy")
                        .HasForeignKey("FoodId");

                    b.HasOne("Diet.Domain.food.Entities.FoodStuff", "FoodStuff")
                        .WithMany("CaseFoodStuffAllergy")
                        .HasForeignKey("FoodStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("FoodStuff");
                });

            modelBuilder.Entity("Diet.Domain.casePleasantFood.CasePleasantFood", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("PleasantFood")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "Food")
                        .WithMany("CasePleasantFood")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Diet.Domain.caseSupplement.CaseSupplement", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("CaseSupplement")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Supplement", "Supplement")
                        .WithMany("CaseSupplement")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.caseUnPleasantFood.CaseUnPleasantFood", b =>
                {
                    b.HasOne("Diet.Domain.Case.Case", "Case")
                        .WithMany("UnPleasantFood")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "Food")
                        .WithMany("CaseUnPleasantFood")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Diet.Domain.disease.Disease", b =>
                {
                    b.HasOne("Diet.Domain.disease.Disease", null)
                        .WithMany("Childeren")
                        .HasForeignKey("DiseaseId");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food", b =>
                {
                    b.HasOne("Diet.Domain.food.Entities.FoodGroup", "FoodGroup")
                        .WithMany("Food")
                        .HasForeignKey("FoodGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodGroup");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Drug_Intraction", b =>
                {
                    b.HasOne("Diet.Domain.drug.Entities.Drug", "Drug")
                        .WithMany("Food_Drug_Intraction")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "Food")
                        .WithMany("Food_Drug_Intraction")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food_Food_Intraction", b =>
                {
                    b.HasOne("Diet.Domain.food.Entities.Food", "FoodFirst")
                        .WithMany("FoodFirst")
                        .HasForeignKey("FoodFistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.food.Entities.Food", "FoodSecond")
                        .WithMany("FoodSecond")
                        .HasForeignKey("FoodSecondId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FoodFirst");

                    b.Navigation("FoodSecond");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.Entities.LifeCourse", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.Entities.LifeCourse", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Diet.Domain.recommendationDisease_WhiteList.RecommendationDisease_WhiteList", b =>
                {
                    b.HasOne("Diet.Domain.disease.Disease", "Disease")
                        .WithMany("RecommendationDisease_WhiteList")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.recommendation.Recommendation", "Recommendation")
                        .WithMany("RecommendationDisease_WhiteList")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.recommendationDurationAge.RecommendationDurationAge", b =>
                {
                    b.HasOne("Diet.Domain.durationAge.Entities.DurationAge", "DurationAge")
                        .WithMany("RecommendationDurationAge")
                        .HasForeignKey("DurationAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.recommendation.Recommendation", "Recommendation")
                        .WithMany("RecommendationDurationAge")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationAge");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.recommendationLifeCourse.RecommendationLifeCourse", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.Entities.LifeCourse", "LifeCourse")
                        .WithMany("RecommendationLifeCourse")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.recommendation.Recommendation", "Recommendation")
                        .WithMany("RecommendationLifeCourse")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Supplement", b =>
                {
                    b.HasOne("Diet.Domain.supplementGroup.SupplementGroup", "SupplementGroup")
                        .WithMany("Supplement")
                        .HasForeignKey("SupplementGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplementGroup");
                });

            modelBuilder.Entity("Diet.Domain.supplementDisease_WhiteList.SupplementDisease_WhiteList", b =>
                {
                    b.HasOne("Diet.Domain.disease.Disease", "Disease")
                        .WithMany("SupplementDisease_WhiteList")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Supplement", "Supplement")
                        .WithMany("SupplementDisease_WhiteList")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplementDurationAge.SupplementDurationAge", b =>
                {
                    b.HasOne("Diet.Domain.durationAge.Entities.DurationAge", "DurationAge")
                        .WithMany("SupplementDurationAge")
                        .HasForeignKey("DurationAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Supplement", "Supplement")
                        .WithMany("SupplementDurationAge")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationAge");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.supplementLifeCourse.SupplementLifeCourse", b =>
                {
                    b.HasOne("Diet.Domain.lifeCourse.Entities.LifeCourse", "LifeCourse")
                        .WithMany("SupplementLifeCourse")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.supplement.Supplement", "Supplement")
                        .WithMany("SupplementLifeCourse")
                        .HasForeignKey("SupplementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeCourse");

                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Ticket", b =>
                {
                    b.HasOne("Diet.Domain.user.User", "User")
                        .WithMany("Ticket")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diet.Domain.ticketMessage.TicketMessage", b =>
                {
                    b.HasOne("Diet.Domain.user.User", "FromUser")
                        .WithMany("FormTicketMessage")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diet.Domain.ticket.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Diet.Domain.userRole.UserRole", b =>
                {
                    b.HasOne("Diet.Domain.role.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diet.Domain.user.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diet.Domain.Case.Case", b =>
                {
                    b.Navigation("CaseDrug");

                    b.Navigation("CaseSupplement");

                    b.Navigation("Disease");

                    b.Navigation("FoodStuffAllergy");

                    b.Navigation("PleasantFood");

                    b.Navigation("UnPleasantFood");
                });

            modelBuilder.Entity("Diet.Domain.disease.Disease", b =>
                {
                    b.Navigation("CaseDisease");

                    b.Navigation("Childeren");

                    b.Navigation("RecommendationDisease_WhiteList");

                    b.Navigation("SupplementDisease_WhiteList");
                });

            modelBuilder.Entity("Diet.Domain.drug.Entities.Drug", b =>
                {
                    b.Navigation("CaseDrug");

                    b.Navigation("Food_Drug_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.durationAge.Entities.DurationAge", b =>
                {
                    b.Navigation("RecommendationDurationAge");

                    b.Navigation("SupplementDurationAge");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.Food", b =>
                {
                    b.Navigation("CaseFoodStuffAllergy");

                    b.Navigation("CasePleasantFood");

                    b.Navigation("CaseUnPleasantFood");

                    b.Navigation("FoodFirst");

                    b.Navigation("FoodSecond");

                    b.Navigation("Food_Drug_Intraction");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodGroup", b =>
                {
                    b.Navigation("Food");
                });

            modelBuilder.Entity("Diet.Domain.food.Entities.FoodStuff", b =>
                {
                    b.Navigation("CaseFoodStuffAllergy");
                });

            modelBuilder.Entity("Diet.Domain.lifeCourse.Entities.LifeCourse", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("Children");

                    b.Navigation("RecommendationLifeCourse");

                    b.Navigation("SupplementLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.recommendation.Recommendation", b =>
                {
                    b.Navigation("RecommendationDisease_WhiteList");

                    b.Navigation("RecommendationDurationAge");

                    b.Navigation("RecommendationLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.role.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Diet.Domain.sport.Sport", b =>
                {
                    b.Navigation("Case");
                });

            modelBuilder.Entity("Diet.Domain.supplement.Supplement", b =>
                {
                    b.Navigation("CaseSupplement");

                    b.Navigation("SupplementDisease_WhiteList");

                    b.Navigation("SupplementDurationAge");

                    b.Navigation("SupplementLifeCourse");
                });

            modelBuilder.Entity("Diet.Domain.supplementGroup.SupplementGroup", b =>
                {
                    b.Navigation("Supplement");
                });

            modelBuilder.Entity("Diet.Domain.ticket.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Diet.Domain.transactions.Transactions", b =>
                {
                    b.Navigation("Case");
                });

            modelBuilder.Entity("Diet.Domain.user.User", b =>
                {
                    b.Navigation("Case");

                    b.Navigation("FormTicketMessage");

                    b.Navigation("Ticket");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
